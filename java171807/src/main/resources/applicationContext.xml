<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--1.配置DBCP的数据源-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="url" value="jdbc:mysql:///db_7?characterEncoding=utf-8"></property>
        <property name="driverClassName" value="org.gjt.mm.mysql.Driver"></property>
        <property name="username" value="root"></property>
        <property name="password" value="123456"></property>
    </bean>
    <!--2.创建SqlSessionFactory 由Spring提供-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="mapperLocations" value="classpath:com/qf/mapper/*Mapper.xml"></property>
        <!--加载mybatis核心配置文件中的插件配置-->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml"></property>-->
    </bean>
    <!--3.DAO接口扫描动态生成DAO接口的代理实现类-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--必须定位到具体的DAO接口包-->
        <property name="basePackage" value="com.qf.dao"></property>
    </bean>
    <!--4.创建服务层对象使用注解方式 注解注入DAO-->
    <!--开启注解扫描服务层的注解-->
    <context:component-scan base-package="com.qf.service"></context:component-scan>
    <!--5.创建事务管理通知类对象-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--6.定义事务通知切面,让事务应用到具体的方法-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="find*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!--7.AOP编程:让切入点和通知关联形成切面-->
    <aop:config>
        <aop:pointcut id="myPoint" expression="execution(* com.qf.service..*.*(..))"></aop:pointcut>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="myPoint"></aop:advisor>
    </aop:config>

    <context:component-scan base-package="com.qf.action"></context:component-scan>
    <!--配置控制器映射器和适配器-->
    <mvc:annotation-driven></mvc:annotation-driven>
    <!--配置视图解析器:逻辑视图-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--前缀-->
        <!--<property name="prefix" value="/"></property>-->
        <!--后缀-->
        <!--<property name="suffix" value=".jsp"></property>-->
    </bean>

</beans>